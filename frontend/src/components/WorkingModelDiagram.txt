import dagre from 'dagre';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import ReactFlow, {
  ReactFlowProvider,
  addEdge,
  useEdgesState,
  useNodesState,
} from 'reactflow';
import 'reactflow/dist/style.css';
import CustomCardinalityEdge from './CustomCardinalityEdge';
import CustomModelNode from './CustomModelNode';
import OverwriteModal from './OverwriteModal';
import SaveModelPopup from './SaveModelPopup';

export const getCardinalities = (relType) => {
  if (relType === 'ForeignKey' || relType === 'ManyToOne') {
    return { source: 'N', target: '1' };
  } else if (relType === 'OneToOneField') {
    return { source: '1', target: '1' };
  } else if (relType === 'ManyToManyField') {
    return { source: 'N', target: 'N' };
  }
  return { source: '', target: '' };
};

const determineRelationType = (sourceCard, targetCard) => {
  if (sourceCard === '' && targetCard === '') return '';
  if (sourceCard === '1' && targetCard === '1') return 'OneToOneField';
  if (sourceCard === 'N' && targetCard === 'N') return 'ManyToManyField';
  return 'ForeignKey';
};

const nodeTypes = { customModel: CustomModelNode };
const edgeTypes = { customEdge: CustomCardinalityEdge };

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));
const nodeWidth = 180;
const nodeHeight = 80;

export const getLayoutedElements = (nodes, edges, direction = 'TB') => {
  dagreGraph.setGraph({
    rankdir: direction,
    nodesep: 30,
    ranksep: 70,
    marginx: 20,
    marginy: 20,
  });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  nodes.forEach((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    node.targetPosition = 'top';
    node.sourcePosition = 'bottom';
  });

  let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
  nodes.forEach((node) => {
    if (node.position.x < minX) minX = node.position.x;
    if (node.position.y < minY) minY = node.position.y;
    if (node.position.x > maxX) maxX = node.position.x;
    if (node.position.y > maxY) maxY = node.position.y;
  });
  const layoutWidth = maxX - minX;
  const layoutHeight = maxY - minY;
  const desiredDimension = Math.max(layoutWidth, layoutHeight);
  nodes.forEach((node) => {
    node.position = {
      x: node.position.x - minX + (desiredDimension - layoutWidth) / 2,
      y: node.position.y - minY + (desiredDimension - layoutHeight) / 2,
    };
  });

  return { nodes, edges };
};

const modalStyle = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  background: '#fff',
  border: '1px solid #ccc',
  borderRadius: '4px',
  padding: '1rem',
  zIndex: 1000,
};

const overlayStyle = {
  position: 'fixed',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  background: 'rgba(0, 0, 0, 0.3)',
  zIndex: 999,
};

const ModelDiagram = ({ initialNodes = [], initialEdges = [] }) => {
  const navigate = useNavigate();
  const { fileId } = useParams(); // if provided, pre-loaded model file
  const [projectId, setProjectId] = useState(localStorage.getItem('project_id'));
  const [appId, setAppId] = useState(localStorage.getItem('app_id'));
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [codeOutput, setCodeOutput] = useState('');
  const [cardinalityEditor, setCardinalityEditor] = useState(null);
  const [showSavePopup, setShowSavePopup] = useState(false);
  const [showOverwriteModal, setShowOverwriteModal] = useState(false);
  const [existingModelFile, setExistingModelFile] = useState('');

  const token = localStorage.getItem('access_token');

  useEffect(() => {
    console.log('All Nodes:', nodes);
    console.log('All Edges:', edges);
  }, [nodes, edges]);

  // Load pre-existing model file if fileId is provided.
  useEffect(() => {
    if (fileId) {
      const fetchSavedModel = async () => {
        try {
          const res = await fetch(`/api/model-file/?fileId=${fileId}`, {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`,
            },
          });
          if (res.ok) {
            const data = await res.json();
            if (data.diagram) {
              setNodes(data.diagram.nodes || []);
              setEdges(data.diagram.edges || []);
            }
            if (data.content) {
              setCodeOutput(data.content);
            }
          } else {
            console.error('Failed to load saved model file.');
          }
        } catch (err) {
          console.error('Error loading saved model file:', err);
        }
      };
      fetchSavedModel();
    }
  }, [fileId, token, setNodes, setEdges]);

  const removeEdge = useCallback(
    (edgeId) => {
      setEdges((eds) => eds.filter((edge) => edge.id !== edgeId));
    },
    [setEdges]
  );

  const openCardinalityEditor = useCallback(
    (edgeId, edgeData) => {
      const sourceNode = nodes.find((n) => n.id === edgeData.source);
      const targetNode = nodes.find((n) => n.id === edgeData.target);
      setCardinalityEditor({
        edgeId,
        sourceLabel: sourceNode ? sourceNode.data.model_name || 'Source' : 'Source',
        targetLabel: targetNode ? targetNode.data.model_name || 'Target' : 'Target',
        sourceCardinality: edgeData.sourceCardinality || '',
        targetCardinality: edgeData.targetCardinality || '',
      });
    },
    [nodes]
  );

  useEffect(() => {
    setEdges((eds) =>
      eds.map((edge) => ({
        ...edge,
        data: {
          ...edge.data,
          onRemoveEdge: removeEdge,
          onOpenCardinalityEditor: openCardinalityEditor,
        },
      }))
    );
  }, [removeEdge, openCardinalityEditor, setEdges]);

  const updateEdgeCardinality = useCallback(
    (edgeId, newSource, newTarget) => {
      const newRelationType = determineRelationType(newSource, newTarget);
      setEdges((eds) =>
        eds.map((edge) =>
          edge.id === edgeId
            ? {
                ...edge,
                data: {
                  ...edge.data,
                  sourceCardinality: newSource,
                  targetCardinality: newTarget,
                  relation_type: newRelationType,
                },
              }
            : edge
        )
      );
    },
    [setEdges]
  );

  const onConnect = useCallback(
    (connection) => {
      console.log('onConnect fired:', connection);
      const duplicate = edges.some(
        (edge) =>
          (edge.source === connection.source && edge.target === connection.target) ||
          (edge.source === connection.target && edge.target === connection.source)
      );
      if (duplicate) {
        console.log('Duplicate connection found; not adding.');
        return;
      }
      setEdges((eds) =>
        addEdge(
          {
            ...connection,
            sourceHandle: null,
            targetHandle: null,
            id: `e${connection.source}-${connection.target}-${Date.now()}`,
            type: 'customEdge',
            data: {
              relation_type: '',
              source: connection.source,
              target: connection.target,
              sourceCardinality: '',
              targetCardinality: '',
              onRemoveEdge: removeEdge,
              onOpenCardinalityEditor: openCardinalityEditor,
            },
          },
          eds
        )
      );
    },
    [edges, setEdges, removeEdge, openCardinalityEditor]
  );

  const renderedNodes = useMemo(
    () => nodes.filter((node) => !(node.data && node.data.isBuiltIn)),
    [nodes]
  );

  const renderedEdges = useMemo(() => {
    return edges.filter((edge) => {
      const sourceNode = nodes.find((n) => n.id === edge.source);
      const targetNode = nodes.find((n) => n.id === edge.target);
      if (!sourceNode || !targetNode) return false;
      if ((sourceNode.data && sourceNode.data.isBuiltIn) ||
          (targetNode.data && targetNode.data.isBuiltIn)) {
        return false;
      }
      return true;
    });
  }, [edges, nodes]);

  useEffect(() => {
    if (nodes.length > 0) {
      const { nodes: layoutedNodes, edges: layoutedEdges } = getLayoutedElements(
        [...nodes],
        [...edges],
        'TB'
      );
      setNodes(layoutedNodes);
      setEdges(layoutedEdges);
    }
  }, [nodes.length, edges.length, setNodes, setEdges]);

  const updateModelCode = async () => {
    const payload = { elements: [...nodes, ...edges] };
    console.log('Payload for code generation:', payload);
    try {
      const response = await fetch('/api/generate-model-code/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await response.json();
      if (data.code) {
        setCodeOutput(data.code);
      } else {
        console.error('No code returned from generate-model-code:', data);
      }
    } catch (error) {
      console.error('Error updating code:', error);
    }
  };

  // When Save Model File is clicked:
  // - If fileId exists (pre-loaded file), show simple overwrite confirmation.
  // - Otherwise, open the SaveModelPopup for project/app selection.
  const handleSaveModelFile = () => {
    console.log('handleSaveModelFile, fileId:', fileId);
    if (fileId) {
      setShowOverwriteModal(true);
    } else {
      setShowSavePopup(true);
    }
  };

  // When SaveModelPopup returns a selected project/app.
  const handlePopupSave = async (selectedProject, selectedApp) => {
    setShowSavePopup(false);
    localStorage.setItem('project_id', selectedProject.id);
    localStorage.setItem('app_id', selectedApp.id);
    const finalProjectId = Number(selectedProject.id);
    const finalAppId = Number(selectedApp.id);
    if (!finalProjectId || !finalAppId) {
      alert('Please ensure a project and an app are selected before saving.');
      return;
    }
    if (!codeOutput.trim()) {
      alert('Generated code is empty. Please generate code first.');
      return;
    }
    try {
      const res = await fetch(`/api/model-file/?app_id=${finalAppId}`, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });
      if (res.ok) {
        const existingData = await res.json();
        if (existingData && existingData.content) {
          setExistingModelFile(existingData.content);
          // For newly parsed model, show detailed overwrite confirmation.
          setShowOverwriteModal(true);
          return;
        }
      }
    } catch (err) {
      console.error("Error checking for existing model file:", err);
    }
    await saveModel(finalAppId);
  };

  // Overwrite modal actions.
  const handleOverwrite = async () => {
    setShowOverwriteModal(false);
    const finalAppId = Number(localStorage.getItem('app_id'));
    await saveModel(finalAppId);
  };

  const handleCancelOverwrite = () => {
    setShowOverwriteModal(false);
    alert("Canceled overwriting. Please choose a different app or cancel the save operation.");
  };

  // Save the model file via POST.
  const saveModel = async (finalAppId) => {
    const payload = {
      app_id: finalAppId,
      content: codeOutput,
      description: 'models.py',
      diagram: { nodes: renderedNodes, edges: renderedEdges },
    };
    console.log('Saving model file with payload:', payload);
    try {
      const response = await fetch('/api/save-model-file/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });
      const data = await response.json();
      if (response.ok) {
        alert('Model file saved successfully!');
      } else {
        console.error('Error saving model file:', data);
        alert('Error saving model file.');
      }
    } catch (error) {
      console.error('Error saving model file:', error);
      alert('Error saving model file.');
    }
  };

  return (
    <div>
      <div style={{ height: '80vh', border: '1px solid #ddd', marginBottom: '1rem' }}>
        <ReactFlowProvider>
          <ReactFlow
            nodes={renderedNodes}
            edges={renderedEdges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            nodeTypes={nodeTypes}
            edgeTypes={edgeTypes}
            isValidConnection={(connection) => !!connection.source}
            fitView
          />
        </ReactFlowProvider>
      </div>

      <div style={{ textAlign: 'center', marginBottom: '1rem' }}>
        <button onClick={updateModelCode} style={{ marginRight: '1rem' }}>
          Generate Code
        </button>
        <button onClick={handleSaveModelFile}>Save Model File</button>
      </div>

      {codeOutput && (
        <div style={{ margin: '1rem', textAlign: 'left' }}>
          <h3>Generated Code (Preview)</h3>
          <pre
            style={{
              background: '#f5f5f5',
              padding: '1rem',
              whiteSpace: 'pre-wrap',
              borderRadius: '4px',
              border: '1px solid #ccc',
              fontFamily: 'Consolas, Courier New, monospace',
              maxHeight: '400px',
              overflow: 'auto',
            }}
          >
            {codeOutput}
          </pre>
        </div>
      )}

      {cardinalityEditor && (
        <>
          <div style={overlayStyle} onClick={() => setCardinalityEditor(null)} />
          <div style={modalStyle}>
            <h3>Edit Cardinality</h3>
            <div>
              <strong>{cardinalityEditor.sourceLabel}</strong> (Source):&nbsp;
              <select
                value={cardinalityEditor.sourceCardinality}
                onChange={(e) =>
                  setCardinalityEditor({
                    ...cardinalityEditor,
                    sourceCardinality: e.target.value,
                  })
                }
              >
                <option value="">Select</option>
                <option value="1">1</option>
                <option value="N">N</option>
              </select>
            </div>
            <div style={{ marginTop: '0.5rem' }}>
              <strong>{cardinalityEditor.targetLabel}</strong> (Target):&nbsp;
              <select
                value={cardinalityEditor.targetCardinality}
                onChange={(e) =>
                  setCardinalityEditor({
                    ...cardinalityEditor,
                    targetCardinality: e.target.value,
                  })
                }
              >
                <option value="">Select</option>
                <option value="1">1</option>
                <option value="N">N</option>
              </select>
            </div>
            <div style={{ marginTop: '1rem' }}>
              <button
                onClick={() => {
                  updateEdgeCardinality(
                    cardinalityEditor.edgeId,
                    cardinalityEditor.sourceCardinality,
                    cardinalityEditor.targetCardinality
                  );
                  setCardinalityEditor(null);
                }}
              >
                Save
              </button>
              <button
                onClick={() => setCardinalityEditor(null)}
                style={{ marginLeft: '1rem' }}
              >
                Cancel
              </button>
            </div>
          </div>
        </>
      )}

      {showSavePopup && (
        <SaveModelPopup
          onClose={() => setShowSavePopup(false)}
          onSave={handlePopupSave}
        />
      )}

      {showOverwriteModal && (
        <OverwriteModal
          existingContent={existingModelFile}
          onOverwrite={handleOverwrite}
          onCancel={handleCancelOverwrite}
          showDetails={!fileId} // if no fileId, show extra details (for newly parsed model code)
        />
      )}
    </div>
  );
};

export default ModelDiagram;
